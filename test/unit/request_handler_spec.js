/*globals describe, it, beforeEach, afterEach, rewireInApp, buildFailureOnCall */
/*jshint expr:true*/

require("should");
var sinon = require("sinon"),

    makeHandler = rewireInApp("request_handler"),
    requestHandler = makeHandler("utf8", "content");



// note:  this block runs in only one mode (stand-alone server or middleware)
// to ensure TSME actually behaves the same in both configurations, we
// rely on (1) integration tests and (2) randomly choosing which mode
// is used.  If failures occur, note the log line generated by the test
// run to see what mode it was in, and manually assign that value to the
// mode variable here to ensure that you're debugging in the right case.
describe("request handling", function () {
  var sandbox, req, res;

  function requestAndValidate(done) {
    requestHandler(req, res,
        buildFailureOnCall(done, "Express request handler should have responded but didn't"));
  }

  beforeEach(function () {
    sandbox = sinon.sandbox.create();

    req = {
      path: "/",
      params: {},
      route: {}
    };
    res = { locals: {} };
  });

  afterEach(function () {
    sandbox.restore();
  });

  describe("for root it serves content/pages/index.md", function () {
    it("processes through markdown", function (done) {
      res.render = function (templateName, contentHash) {
        contentHash.contentFromMarkdown.should.equal(
            "<p><strong>Hello</strong>, <em>world</em>.</p>\n"
        );
        done();
      };

      requestAndValidate();
    });

    it("uses content/templates/default.hbs when content/templates/index.hbs doesn't exist", function (done) {
      var handlerFs = makeHandler.__get__("fs");
      sandbox.stub(handlerFs, "existsSync").returns(false);

      res.render = function (templateName) {
        templateName.should.equal("default");
        done();
      };

      requestAndValidate();
    });

    it("uses content/templates/index.hbs when that exists", function (done) {
      res.render = function (templateName) {
        templateName.should.equal("index");
        done();
      };

      requestAndValidate();
    });
  });

  describe("for any page", function () {
    beforeEach(function () {
      req.path = "/some-page";
    });

    it("gets the default template", function (done) {
      res.render = function (templateName) {
        templateName.should.equal("default");
        done();
      };

      requestAndValidate();
    });

    it("includes content from the page's markdown file", function (done) {
      res.render = function (templateName, contentHash) {
        contentHash.contentFromMarkdown.should.equal(
            "<p>This page.  Is a page.</p>\n"
        );
        done();
      };

      requestAndValidate();
    });
  });
});
